{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "gitCommitHash": {
      "type": "string"
    },
    "appServicePlanName": {
      "type": "string"
    },
    "appServicePlanSkuTier": {
      "type": "string"
    },
    "appServicePlanSkuSize": {
      "type": "string"
    },
    "appServicePlanSkuFamily": {
      "type": "string"
    },
    "appServicePlanSkuCapacity": {
      "type": "int"
    },
    "appServiceName": {
      "type": "string"
    },
    "appServiceRuntimeStack": {
      "type": "string"
    },
    "appServiceAlwaysOn": {
      "type": "bool"
    },
    "appServiceHostNames": {
      "type": "array",
      "defaultValue": ["PLACEHOLDER"],
      "metadata": {
        "description": "This must include at least 1 entry. The first host name will be treated as canonical, assuming that all later host names redirect to the canonical one. Include 'PLACEHOLDER' to skip all."
      }
    },
    "appServiceCertificateSecretNames": {
      "type": "array",
      "defaultValue": ["PLACEHOLDER"],
      "metadata": {
        "description": "This must include least 1 entry. It will be ignored if appServiceHostNames contains 'PLACEHOLDER'."
      }
    },
    "appServiceHostNameToCertificateSecretNameIndexMap": {
      "type": "object",
      "defaultValue": {
        "PLACEHOLDER": 0
      },
      "metadata": {
        "description": "This is a map from host name to appServiceCertificateSecretNames index. It must include values for all appServiceHostNames."
      }
    },
    "appServiceEnvironmentVariables": {
      "type": "array",
      "defaultValue": []
    },
    "keyVaultResourceGroupName": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "enableLogs": {
      "type": "bool",
      "defaultValue": true
    },
    "workerContainerName": {
      "type": "string"
    },
    "migrationRunnerContainerName": {
      "type": "string"
    },
    "containerImageName": {
      "type": "string"
    },
    "migrationRunnerContainerInstanceName": {
      "type": "string"
    },
    "workerContainerInstanceName": {
      "type": "string"
    },
    "containerNetworkProfileId": {
      "type": "string"
    }
  },
  "variables": {
    "platformBuildingBlocksDeploymentUrlBase": "https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/7a4748a0cf366193d31434bd7796d483bd281385/templates/",
    "deploymentUrlBase": "[concat('https://raw.githubusercontent.com/DFE-Digital/dfe-teachers-payment-service/', parameters('gitCommitHash'), '/azure/templates/')]",

    "appServiceCertificateDeploymentNamePrefix": "[concat(deployment().name, '-app-service-certificate-')]",

    "appServiceLogsDeploymentName": "[concat(deployment().name, '-app-service-logs')]",
    "appServicePlanDeploymentName": "[concat(deployment().name, '-app-service-plan')]",
    "workerDeploymentName": "[concat(deployment().name, '-worker')]",
    "migrationRunnerDeploymentName": "[concat(deployment().name, '-migration-runner')]",

    "appServiceCertificateDeploymentCopyLoopName": "[concat(parameters('appServiceName'),'-certificate-deployment-copy')]",
    "appServiceHostNameBindingsCopyLoopName": "[concat(parameters('appServiceName'),'-host-name-bindings-copy')]",

    "appServiceStagingSlotName": "[concat(parameters('appServiceName'), '/staging')]",

    "appServiceHostNameBindingsNamePrefix": "[concat(parameters('appServiceName'), '/')]",

    "hasCustomHostNames": "[and(greater(length(parameters('appServiceHostNames')), 0), not(contains(parameters('appServiceHostNames'), 'PLACEHOLDER')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[variables('appServicePlanDeploymentName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app_service_plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[parameters('appServicePlanName')]"
          },
          "appServicePlanSkuTier": {
            "value": "[parameters('appServicePlanSkuTier')]"
          },
          "appServicePlanSkuSize": {
            "value": "[parameters('appServicePlanSkuSize')]"
          },
          "appServicePlanSkuFamily": {
            "value": "[parameters('appServicePlanSkuFamily')]"
          },
          "appServicePlanSkuCapacity": {
            "value": "[parameters('appServicePlanSkuCapacity')]"
          }
        }
      }
    },
    {
      "condition": "[variables('hasCustomHostNames')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[concat(variables('appServiceCertificateDeploymentNamePrefix'), copyIndex())]",
      "dependsOn": ["[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]"],
      "copy": {
        "name": "[variables('appServiceCertificateDeploymentCopyLoopName')]",
        "count": "[length(parameters('appServiceCertificateSecretNames'))]",
        "mode": "Serial"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('platformBuildingBlocksDeploymentUrlBase'), 'app-service-certificate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[parameters('appServiceCertificateSecretNames')[copyIndex()]]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('keyVaultResourceGroupName')]"
          },
          "serverFarmId": {
            "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[parameters('appServiceName')]",
      "kind": "app,linux,container",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('migrationRunnerDeploymentName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[parameters('appServiceAlwaysOn')]",
          "appSettings": "[parameters('appServiceEnvironmentVariables')]",
          "healthCheckPath": "/healthcheck"
        }
      }
    },
    {
      "type": "Microsoft.Web/sites/slots",
      "apiVersion": "2018-11-01",
      "name": "[variables('appServiceStagingSlotName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": ["[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": false,
          "linuxFxVersion": "[parameters('appServiceRuntimeStack')]",
          "appSettings": "[parameters('appServiceEnvironmentVariables')]"
        }
      }
    },
    {
      "condition": "[variables('hasCustomHostNames')]",
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceHostNameBindingsNamePrefix'), parameters('appServiceHostNames')[copyIndex()])]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', concat(variables('appServiceCertificateDeploymentNamePrefix'), parameters('appServiceHostNameToCertificateSecretNameIndexMap')[parameters('appServiceHostNames')[copyIndex()]]))]",
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
      ],
      "copy": {
        "name": "[variables('appServiceHostNameBindingsCopyLoopName')]",
        "count": "[length(parameters('appServiceHostNames'))]",
        "mode": "Serial"
      },
      "properties": {
        "sslState": "SniEnabled",
        "thumbprint": "[if(variables('hasCustomHostNames'), reference(resourceId('Microsoft.Resources/deployments', concat(variables('appServiceCertificateDeploymentNamePrefix'), parameters('appServiceHostNameToCertificateSecretNameIndexMap')[parameters('appServiceHostNames')[copyIndex()]]))).outputs.certificateThumbprint.value, 'PLACEHOLDER')]"
      }
    },
    {
      "condition": "[parameters('enableLogs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[variables('appServiceLogsDeploymentName')]",
      "dependsOn": ["[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('platformBuildingBlocksDeploymentUrlBase'), 'app-service-logs.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[parameters('appServiceName')]"
          },
          "httpLoggingEnabled": {
            "value": true
          },
          "requestTracingEnabled": {
            "value": true
          },
          "detailedErrorLoggingEnabled": {
            "value": true
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[variables('migrationRunnerDeploymentName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'container.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "containerInstanceName": {
            "value": "[parameters('migrationRunnerContainerInstanceName')]"
          },
          "containerName": {
            "value": "[parameters('migrationRunnerContainerName')]"
          },
          "imageName": {
            "value": "[parameters('containerImageName')]"
          },
          "environmentVariables": {
            "value": "[parameters('appServiceEnvironmentVariables')]"
          },
          "networkProfileId": {
            "value": "[parameters('containerNetworkProfileId')]"
          },
          "command": {
            "value": ["bin/prepare-database"]
          },
          "restartPolicy": {
            "value": "OnFailure"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[variables('workerDeploymentName')]",
      "dependsOn": ["[resourceId('Microsoft.Resources/deployments', variables('migrationRunnerDeploymentName'))]"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'container.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "containerInstanceName": {
            "value": "[parameters('workerContainerInstanceName')]"
          },
          "containerName": {
            "value": "[parameters('workerContainerName')]"
          },
          "imageName": {
            "value": "[parameters('containerImageName')]"
          },
          "environmentVariables": {
            "value": "[parameters('appServiceEnvironmentVariables')]"
          },
          "networkProfileId": {
            "value": "[parameters('containerNetworkProfileId')]"
          },
          "command": {
            "value": ["bin/start-worker"]
          }
        }
      }
    }
  ],
  "outputs": {
    "appServicePlanId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
    },
    "appServiceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
    },
    "workerContainerInstanceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('workerContainerInstanceName'))]"
    },
    "appServicePossibleOutboundIpAddresses": {
      "type": "array",
      "value": "[split(reference(resourceId('Microsoft.Web/sites', parameters('appServiceName'))).possibleOutboundIpAddresses, ',')]"
    },
    "appServiceCanonicalHostName": {
      "type": "string",
      "value": "[if(variables('hasCustomHostNames'), first(parameters('appServiceHostNames')), reference(resourceId('Microsoft.Web/sites', parameters('appServiceName'))).defaultHostName)]"
    }
  }
}
